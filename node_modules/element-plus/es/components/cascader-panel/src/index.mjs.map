{"version":3,"file":"index.mjs","sources":["../../../../../../packages/components/cascader-panel/src/index.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('panel'), ns.is('bordered', border)]\"\n    @keydown=\"handleKeyDown\"\n  >\n    <el-cascader-menu\n      v-for=\"(menu, index) in menus\"\n      :key=\"index\"\n      :ref=\"(item) => (menuList[index] = item)\"\n      :index=\"index\"\n      :nodes=\"[...menu]\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUpdate,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { flattenDeep, isEqual } from 'lodash-unified'\nimport { isClient } from '@vueuse/core'\nimport {\n  castArray,\n  focusNode,\n  getSibling,\n  isEmpty,\n  scrollIntoView,\n  unique,\n} from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport ElCascaderMenu from './menu.vue'\nimport Store from './store'\nimport Node, { ExpandTrigger } from './node'\nimport { CommonProps, useCascaderConfig } from './config'\nimport { checkNode, getMenuIndex, sortByOriginalOrder } from './utils'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  default as CascaderNode,\n  CascaderNodeValue,\n  CascaderOption,\n  CascaderValue,\n  RenderLabel,\n} from './node'\n\nimport type { ElCascaderPanelContext } from './types'\n\nexport default defineComponent({\n  name: 'ElCascaderPanel',\n\n  components: {\n    ElCascaderMenu,\n  },\n\n  props: {\n    ...CommonProps,\n    border: {\n      type: Boolean,\n      default: true,\n    },\n    renderLabel: Function as PropType<RenderLabel>,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, 'close', 'expand-change'],\n\n  setup(props, { emit, slots }) {\n    // for interrupt sync check status in lazy mode\n    let manualChecked = false\n\n    const ns = useNamespace('cascader')\n    const config = useCascaderConfig(props)\n\n    let store: Nullable<Store> = null\n    const initialLoaded = ref(true)\n    const menuList = ref<any[]>([])\n    const checkedValue = ref<Nullable<CascaderValue>>(null)\n    const menus = ref<CascaderNode[][]>([])\n    const expandingNode = ref<Nullable<CascaderNode>>(null)\n    const checkedNodes = ref<CascaderNode[]>([])\n\n    const isHoverMenu = computed(\n      () => config.value.expandTrigger === ExpandTrigger.HOVER\n    )\n    const renderLabelFn = computed(() => props.renderLabel || slots.default)\n\n    const initStore = () => {\n      const { options } = props\n      const cfg = config.value\n\n      manualChecked = false\n      store = new Store(options, cfg)\n      menus.value = [store.getNodes()]\n\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false\n        lazyLoad(undefined, (list) => {\n          if (list) {\n            store = new Store(list, cfg)\n            menus.value = [store.getNodes()]\n          }\n          initialLoaded.value = true\n          syncCheckedValue(false, true)\n        })\n      } else {\n        syncCheckedValue(false, true)\n      }\n    }\n\n    const lazyLoad: ElCascaderPanelContext['lazyLoad'] = (node, cb) => {\n      const cfg = config.value\n      node! = node || new Node({}, cfg, undefined, true)\n      node.loading = true\n\n      const resolve = (dataList: CascaderOption[]) => {\n        const _node = node as Node\n        const parent = _node.root ? null : _node\n        dataList && store?.appendNodes(dataList, parent as any)\n        _node.loading = false\n        _node.loaded = true\n        _node.childrenData = _node.childrenData || []\n        cb && cb(dataList)\n      }\n\n      cfg.lazyLoad(node, resolve as any)\n    }\n\n    const expandNode: ElCascaderPanelContext['expandNode'] = (node, silent) => {\n      const { level } = node\n      const newMenus = menus.value.slice(0, level)\n      let newExpandingNode: Nullable<CascaderNode>\n\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2]\n      } else {\n        newExpandingNode = node\n        newMenus.push(node.children)\n      }\n\n      if (expandingNode.value?.uid !== newExpandingNode?.uid) {\n        expandingNode.value = node\n        menus.value = newMenus\n        !silent && emit('expand-change', node?.pathValues || [])\n      }\n    }\n\n    const handleCheckChange: ElCascaderPanelContext['handleCheckChange'] = (\n      node,\n      checked,\n      emitClose = true\n    ) => {\n      const { checkStrictly, multiple } = config.value\n      const oldNode = checkedNodes.value[0]\n      manualChecked = true\n\n      !multiple && oldNode?.doCheck(false)\n      node.doCheck(checked)\n      calculateCheckedValue()\n      emitClose && !multiple && !checkStrictly && emit('close')\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node)\n    }\n\n    const expandParentNode = (node) => {\n      if (!node) return\n      node = node.parent\n      expandParentNode(node)\n      node && expandNode(node)\n    }\n\n    const getFlattedNodes = (leafOnly: boolean) => {\n      return store?.getFlattedNodes(leafOnly)\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return getFlattedNodes(leafOnly)?.filter((node) => node.checked !== false)\n    }\n\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach((node) => node.doCheck(false))\n      calculateCheckedValue()\n    }\n\n    const calculateCheckedValue = () => {\n      const { checkStrictly, multiple } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = getCheckedNodes(!checkStrictly)!\n      // ensure the original order\n      const nodes = sortByOriginalOrder(oldNodes, newNodes)\n      const values = nodes.map((node) => node.valueByOption)\n      checkedNodes.value = nodes\n      checkedValue.value = multiple ? values : values[0] ?? null\n    }\n\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const { modelValue } = props\n      const { lazy, multiple, checkStrictly } = config.value\n      const leafOnly = !checkStrictly\n\n      if (\n        !initialLoaded.value ||\n        manualChecked ||\n        (!forced && isEqual(modelValue, checkedValue.value))\n      )\n        return\n\n      if (lazy && !loaded) {\n        const values: CascaderNodeValue[] = unique(\n          flattenDeep(castArray(modelValue))\n        )\n        const nodes = values\n          .map((val) => store?.getNodeByValue(val))\n          .filter((node) => !!node && !node.loaded && !node.loading) as Node[]\n\n        if (nodes.length) {\n          nodes.forEach((node) => {\n            lazyLoad(node, () => syncCheckedValue(false, forced))\n          })\n        } else {\n          syncCheckedValue(true, forced)\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue]\n        const nodes = unique(\n          values.map((val) => store?.getNodeByValue(val, leafOnly))\n        ) as Node[]\n        syncMenuState(nodes, false)\n        checkedValue.value = modelValue!\n      }\n    }\n\n    const syncMenuState = (\n      newCheckedNodes: CascaderNode[],\n      reserveExpandingState = true\n    ) => {\n      const { checkStrictly } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = newCheckedNodes.filter(\n        (node) => !!node && (checkStrictly || node.isLeaf)\n      )\n      const oldExpandingNode = store?.getSameNode(expandingNode.value!)\n      const newExpandingNode =\n        (reserveExpandingState && oldExpandingNode) || newNodes[0]\n\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach((node) => expandNode(node, true))\n      } else {\n        expandingNode.value = null\n      }\n\n      oldNodes.forEach((node) => node.doCheck(false))\n      newNodes.forEach((node) => node.doCheck(true))\n\n      checkedNodes.value = newNodes\n      nextTick(scrollToExpandingNode)\n    }\n\n    const scrollToExpandingNode = () => {\n      if (!isClient) return\n\n      menuList.value.forEach((menu) => {\n        const menuElement = menu?.$el\n        if (menuElement) {\n          const container = menuElement.querySelector(\n            `.${ns.namespace.value}-scrollbar__wrap`\n          )\n          const activeNode =\n            menuElement.querySelector(`.${ns.b('node')}.${ns.is('active')}`) ||\n            menuElement.querySelector(`.${ns.b('node')}.in-active-path`)\n          scrollIntoView(container, activeNode)\n        }\n      })\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          e.preventDefault()\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(target, distance, `.${ns.b('node')}[tabindex=\"-1\"]`)\n          )\n          break\n        }\n        case EVENT_CODE.left: {\n          e.preventDefault()\n          const preMenu = menuList.value[getMenuIndex(target) - 1]\n          const expandedNode = preMenu?.$el.querySelector(\n            `.${ns.b('node')}[aria-expanded=\"true\"]`\n          )\n          focusNode(expandedNode)\n          break\n        }\n        case EVENT_CODE.right: {\n          e.preventDefault()\n          const nextMenu = menuList.value[getMenuIndex(target) + 1]\n          const firstNode = nextMenu?.$el.querySelector(\n            `.${ns.b('node')}[tabindex=\"-1\"]`\n          )\n          focusNode(firstNode)\n          break\n        }\n        case EVENT_CODE.enter:\n          checkNode(target)\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          emit('close')\n          break\n      }\n    }\n\n    provide(\n      CASCADER_PANEL_INJECTION_KEY,\n      reactive({\n        config,\n        expandingNode,\n        checkedNodes,\n        isHoverMenu,\n        initialLoaded,\n        renderLabelFn,\n        lazyLoad,\n        expandNode,\n        handleCheckChange,\n      })\n    )\n\n    watch([config, () => props.options], initStore, {\n      deep: true,\n      immediate: true,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        manualChecked = false\n        syncCheckedValue()\n      }\n    )\n\n    watch(checkedValue, (val) => {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n      }\n    })\n\n    onBeforeUpdate(() => (menuList.value = []))\n\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue())\n\n    return {\n      ns,\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      getCheckedNodes,\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode,\n    }\n  },\n})\n</script>\n"],"names":["_resolveComponent","_openBlock","_createElementBlock","_normalizeClass","_Fragment","_renderList","_createBlock"],"mappings":"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"}