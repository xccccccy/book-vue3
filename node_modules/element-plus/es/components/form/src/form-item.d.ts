import type { ExtractPropTypes } from 'vue';
import type { Arrayable } from 'element-plus/es/utils';
import type { FormItemRule } from 'element-plus/es/tokens';
export declare const formItemValidateStates: readonly ["", "error", "validating", "success"];
export declare type FormItemValidateState = typeof formItemValidateStates[number];
export declare type FormItemProp = Arrayable<string>;
export declare const formItemProps: {
    readonly label: StringConstructor;
    readonly labelWidth: import("element-plus/es/utils").BuildPropReturn<readonly [StringConstructor, NumberConstructor], "", unknown, unknown, unknown>;
    readonly prop: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<FormItemProp>, unknown, unknown, unknown, unknown>;
    readonly required: import("element-plus/es/utils").BuildPropReturn<BooleanConstructor, undefined, unknown, unknown, unknown>;
    readonly rules: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<Arrayable<FormItemRule>>, unknown, unknown, unknown, unknown>;
    readonly error: StringConstructor;
    readonly validateStatus: import("element-plus/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, "" | "success" | "error" | "validating", unknown>;
    readonly for: StringConstructor;
    readonly inlineMessage: import("element-plus/es/utils").BuildPropReturn<readonly [StringConstructor, BooleanConstructor], "", unknown, unknown, unknown>;
    readonly showMessage: import("element-plus/es/utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, "" | "default" | "small" | "large", unknown>;
};
export declare type FormItemProps = ExtractPropTypes<typeof formItemProps>;
