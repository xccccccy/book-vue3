declare const _default: import("vue").DefineComponent<{
    readonly style: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
    readonly className: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
    readonly effect: import("../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
    readonly visible: BooleanConstructor;
    readonly enterable: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly pure: BooleanConstructor;
    readonly popperClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
    readonly popperStyle: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
    readonly referenceEl: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
    readonly stopPopperMouseEvent: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly zIndex: NumberConstructor;
    readonly boundariesPadding: import("../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly fallbackPlacements: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
    readonly gpuAcceleration: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly offset: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly placement: import("../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
    readonly popperOptions: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
    readonly strategy: import("../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
}, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        readonly style: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
        readonly className: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
        readonly effect: import("../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
        readonly visible: BooleanConstructor;
        readonly enterable: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        readonly pure: BooleanConstructor;
        readonly popperClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
        readonly popperStyle: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
        readonly referenceEl: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
        readonly stopPopperMouseEvent: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        readonly zIndex: NumberConstructor;
        readonly boundariesPadding: import("../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
        readonly fallbackPlacements: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
        readonly gpuAcceleration: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        readonly offset: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
        readonly placement: import("../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
        readonly popperOptions: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
        readonly strategy: import("../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
    }>> & {
        onMouseleave?: ((...args: any[]) => any) | undefined;
        onMouseenter?: ((...args: any[]) => any) | undefined;
    }>>;
    popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
    contentRef: import("vue").Ref<HTMLElement | undefined>;
    triggerRef: import("vue").Ref<import("element-plus/es/tokens").Measurable | undefined>;
    nextZIndex: () => number;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
    };
    popperContentRef: import("vue").Ref<HTMLElement | undefined>;
    arrowRef: import("vue").Ref<HTMLElement | undefined>;
    arrowOffset: import("vue").Ref<number | undefined>;
    contentZIndex: import("vue").Ref<number>;
    computedReference: import("vue").ComputedRef<import("element-plus/es/tokens").Measurable | undefined>;
    contentStyle: import("vue").ComputedRef<any>;
    contentClass: import("vue").ComputedRef<((string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
    createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
        referenceEl: any;
        popperContentEl: any;
        arrowEl: any;
    }) => import("@popperjs/core").Instance;
    updatePopper: () => void;
    togglePopperAlive: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("mouseenter" | "mouseleave")[], "mouseleave" | "mouseenter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly style: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
    readonly className: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
    readonly effect: import("../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
    readonly visible: BooleanConstructor;
    readonly enterable: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly pure: BooleanConstructor;
    readonly popperClass: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
    readonly popperStyle: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
    readonly referenceEl: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
    readonly stopPopperMouseEvent: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly zIndex: NumberConstructor;
    readonly boundariesPadding: import("../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly fallbackPlacements: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
    readonly gpuAcceleration: import("../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly offset: import("../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly placement: import("../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
    readonly popperOptions: import("../../../utils").BuildPropReturn<import("../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
    readonly strategy: import("../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
}>> & {
    onMouseleave?: ((...args: any[]) => any) | undefined;
    onMouseenter?: ((...args: any[]) => any) | undefined;
}, {
    offset: number;
    effect: string;
    placement: import("../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
    popperClass: string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[];
    boundariesPadding: number;
    fallbackPlacements: import("@popperjs/core").Placement[];
    gpuAcceleration: import("../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
    popperOptions: Partial<import("@popperjs/core").Options>;
    strategy: import("../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
    style: import("vue").StyleValue;
    className: string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[];
    enterable: import("../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
    popperStyle: import("vue").StyleValue;
    referenceEl: HTMLElement;
    stopPopperMouseEvent: import("../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
    visible: boolean;
    pure: boolean;
}>;
export default _default;
