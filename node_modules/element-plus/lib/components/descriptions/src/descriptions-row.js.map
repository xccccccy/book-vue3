{"version":3,"file":"descriptions-row.js","sources":["../../../../../../packages/components/descriptions/src/descriptions-row.vue"],"sourcesContent":["<template>\n  <template v-if=\"descriptions.direction === 'vertical'\">\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr1-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"th\" type=\"label\" />\n      </template>\n    </tr>\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr2-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n    </tr>\n  </template>\n  <tr v-else>\n    <template v-for=\"(cell, index) in row\" :key=\"`tr3-${index}`\">\n      <template v-if=\"descriptions.border\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"label\" />\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n      <el-descriptions-cell v-else :cell=\"cell\" tag=\"td\" type=\"both\" />\n    </template>\n  </tr>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject } from 'vue'\nimport DescriptionsCell from './descriptions-cell'\nimport { elDescriptionsKey } from './token'\n\nimport type { IDescriptionsInject } from './descriptions.type'\n\nexport default defineComponent({\n  name: 'ElDescriptionsRow',\n  components: {\n    [DescriptionsCell.name]: DescriptionsCell,\n  },\n  props: {\n    row: {\n      type: Array,\n    },\n  },\n  setup() {\n    const descriptions = inject(elDescriptionsKey, {} as IDescriptionsInject)\n\n    return {\n      descriptions,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","DescriptionsCell","inject","elDescriptionsKey","_createElementBlock","_Fragment","_createElementVNode","_openBlock","_renderList","_createBlock","_createVNode"],"mappings":"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"}